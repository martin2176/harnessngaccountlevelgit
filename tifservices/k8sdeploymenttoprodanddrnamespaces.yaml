pipeline:
  name: k8sdeployment-to-prod-and-dr-namespaces
  identifier: k8sdeploymenttoprodanddrnamespaces
  projectIdentifier: tifservices
  orgIdentifier: tif
  tags: {}
  stages:
    - stage:
        name: k8sdeployment
        identifier: k8sdeployment
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          environments:
            metadata:
              parallel: true
            values:
              - environmentRef: aksprod
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: prodnamespace
              - environmentRef: aksdr
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: drnamespace
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo <+pipeline.stages.k8sdeployment.variables.environment>
                          echo <+stage.variables.environment>
                          echo <+env.identifier>
                          echo <+pipeline.variables.envname>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
              - step:
                  name: k8srolloutdeployment
                  identifier: k8srolloutdeployment
                  type: K8sRollingDeploy
                  timeout: 3m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
          services:
            values: <+input>
            metadata:
              parallel: true
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: environment
            type: String
            description: Environment name variable created from the env the pipeline runs against
            required: false
            value: <+env.identifier>
    - stage:
        name: Test Deployment
        identifier: Test_Deployment
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo <+service.identifier>.<+infra.namespace>.svc.cluster.local
                          echo "<+service.identifier>.<+infra.namespace>.svc.cluster.local"

                          echo <+pipeline.stages.k8sdeployment.variables.environment>

                          echo <+pipeline.stages.k8sdeployment.spec.env.identifier>
                          echo <+pipeline.variables.envname>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
              - step:
                  name: Test-k8s-Service-DNS-Name
                  identifier: Testk8sServiceDNSName
                  template:
                    templateRef: TestDNSName
                    versionLabel: v1
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: dnsname
                            type: String
                            value: <+service.identifier>.<+infra.namespace>.svc.cluster.local
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: ManualIntervention
                spec:
                  timeout: 1h
                  onTimeout:
                    action:
                      type: MarkAsFailure
        when:
          pipelineStatus: Success
          condition: "false"
    - stage:
        name: Test Stage
        identifier: Test_Stage
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          services:
            useFromStage:
              stage: k8sdeployment
            metadata:
              parallel: true
          environment:
            environmentRef: aksprod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prodnamespace
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo <+env.name>
                          echo <+pipeline.variables.envname>
                          echo <+pipeline.stages.k8sdeployment.variables.environment>
                          echo <+pipeline.stages.k8sdeployment_0.spec.infrastructure.envRef>
                          echo <+pipeline.stages.k8sdeployment_0.spec.infrastructure.output.environment.environmentRef>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: <+env.env.identifier> == "aksprod"
  variables:
    - name: envname
      type: String
      description: Environment name variable created from the env the pipeline runs against
      required: false
      value: <+env.identifier>
