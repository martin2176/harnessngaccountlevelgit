pipeline:
  name: k8sdeployment-to-prod-and-dr-namespaces
  identifier: k8sdeploymenttoprodanddrnamespaces
  projectIdentifier: tifservices
  orgIdentifier: tif
  tags: {}
  stages:
    - stage:
        name: k8sdeployment
        identifier: k8sdeployment
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          environments:
            metadata:
              parallel: true
            values:
              - environmentRef: aksprod
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: prodnamespace
              - environmentRef: aksdr
                deployToAll: false
                infrastructureDefinitions:
                  - identifier: drnamespace
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo <+pipeline.stages.k8sdeployment.variables.environment>
                          echo <+stage.variables.environment>
                          echo <+env.identifier>
                          echo <+pipeline.variables.envname>
                          echo <+stage.identifier>
                          echo <+serviceVariables.requestscpu>
                          echo <+serviceVariables.requestsmemory>
                          echo <+serviceVariables.variablesname>
                          echo <+serviceVariables.variable.name>
                          echo <+serviceVariables.apigeeproxyfqdn>
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
              - step:
                  type: K8sDryRun
                  name: k8sdryrun
                  identifier: k8sdryrun
                  spec: {}
                  timeout: 1m
              - step:
                  type: ShellScript
                  name: copy k8sdryrun file
                  identifier: ShellScript_2
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          PREVIEWDIR="/tmp/k8syamlpreview-<+pipeline.executionId>/"
                          mkdir -p $PREVIEWDIR
                          PREVIEWFILE="$PREVIEWDIR/k8syamlpreview-<+pipeline.executionId>-<+stage.identifier>"

                          cat << EOM > $PREVIEWFILE
                          # pipeline triggered by: <+pipeline.triggeredBy.name>
                          # pipeline triggered by email: <+pipeline.triggeredBy.email> (This returns NULL if the pipeline is triggered using a webhook)
                          # pipeline execution ID: <+pipeline.executionId>
                          # pipeline Name: <+pipeline.name>
                          # pipeline Stage ID: <+stage.identifier>
                          <+pipeline.stages.<+stage.identifier>.spec.execution.steps.k8sdryrun.k8s.manifestDryRun>
                          EOM
                          cat $PREVIEWFILE
                    environmentVariables: []
                    outputVariables: []
                  timeout: 1m
              - step:
                  name: post k8s dryrun to git
                  identifier: post_k8s_dryrun_to_git
                  template:
                    templateRef: Post_Anything_to_Git
                    versionLabel: version2
              - step:
                  name: k8srolloutdeployment
                  identifier: k8srolloutdeployment
                  type: K8sRollingDeploy
                  timeout: 3m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
          services:
            values: <+input>
            metadata:
              parallel: true
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
    - stage:
        name: Post K8s DryRun to Git
        identifier: Post_K8s_DryRun_to_Git
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  name: post k8s dryrun to git
                  identifier: post_k8s_dryrun_to_git
                  template:
                    templateRef: Post_Anything_to_Git
                    versionLabel: version2
        tags: {}
        when:
          pipelineStatus: Success
    - stage:
        name: Test K8s Service and Istio Ingress
        identifier: Test_Stage
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          environment:
            environmentRef: aksprod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prodnamespace
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_1
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo <+env.name>

                          echo <+env.identifier>
                          echo <+pipeline.variables.envname>
                          echo <+pipeline.stages.k8sdeployment.variables.environment>
                          echo <+pipeline.stages.k8sdeployment_0.spec.infrastructure.envRef>
                          echo <+pipeline.stages.k8sdeployment_0.spec.infrastructure.output.environment.environmentRef>
                          echo <+service.identifier>.<+infra.namespace>.svc.cluster.local
                          host <+service.identifier>.<+infra.namespace>.svc.cluster.local

                          echo <+serviceVariables.healthcheckport>
                          echo <+serviceVariables.healthcheckuri>


                          echo "................mtls info....................."

                          echo <+serviceVariables.mtlsfqdn>
                          echo <+serviceVariables.mtlsuri>
                          echo "https://<+serviceVariables.mtlsfqdn>/<+serviceVariables.mtlsuri>"
                          echo "........................."
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
                  when:
                    stageStatus: Success
                    condition: "false"
              - step:
                  name: Test k8s service DNS name
                  identifier: Test_k8s_service_DNS_name
                  template:
                    templateRef: TestDNSName
                    versionLabel: v1
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: dnsname
                            type: String
                            value: <+service.identifier>.<+infra.namespace>.svc.cluster.local
              - step:
                  type: Http
                  name: Test k8 service HTTP
                  identifier: Test_k8_service_HTTP
                  spec:
                    url: http://<+service.identifier>.<+infra.namespace>.svc.cluster.local:<+serviceVariables.healthcheckport>/<+serviceVariables.healthcheckuri>
                    method: GET
                    headers: []
                    inputVariables: []
                    outputVariables: []
                    assertion: <+httpResponseCode> == 200
                  timeout: 30s
                  when:
                    stageStatus: Success
              - step:
                  type: Http
                  name: Test Istio Ingress mTLS HTTPS
                  identifier: Test_Istio_Ingress_mTLS_HTTPS
                  spec:
                    url: https://<+serviceVariables.mtlsfqdn>/<+serviceVariables.mtlsuri>
                    method: GET
                    headers: []
                    inputVariables: []
                    outputVariables:
                      - name: assertionoutputvar
                        value: (<+httpResponseCode> == 200) && (<+httpResponseBody>.contains("Hello"))
                        type: String
                    assertion: (<+httpResponseCode> == 200) && (<+httpResponseBody>.contains("Hello"))
                    certificate: mtlsclientcert
                    certificateKey: mtlsclientkey
                  timeout: 1m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
              - step:
                  type: ShellScript
                  name: Show me the rendered apiproxy xml
                  identifier: Show_me_the_rendered_apiproxy_xml
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "---------------------------------------------"
                          echo ""
                          echo "<+configFile.getAsString("apiproxyxml")>"
                          echo ""
                          echo "---------------------------------------------"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 1m
            rollbackSteps: []
          services:
            useFromStage:
              stage: k8sdeployment
            metadata:
              parallel: true
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: ManualIntervention
                spec:
                  timeout: 1h
                  onTimeout:
                    action:
                      type: MarkAsSuccess
        when:
          pipelineStatus: Success
    - stage:
        name: Test ApigeeProxy
        identifier: Test_ApigeeProxy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          environment:
            environmentRef: aksprod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prodnamespace
          execution:
            steps:
              - step:
                  name: Get-Apigee-AccessToken
                  identifier: GetApigeeAccessToken
                  template:
                    templateRef: Apigeeaccesstokenrequest
                    versionLabel: version1
              - step:
                  type: Http
                  name: Test Apigee Proxy
                  identifier: Test_Apigee_Proxy
                  spec:
                    url: https://<+serviceVariables.apigeeproxyfqdn>/<+serviceVariables.mtlsuri>
                    method: GET
                    headers:
                      - key: Authorization
                        value: Bearer <+execution.steps.GetApigeeAccessToken.output.outputVariables.access_token>
                    inputVariables: []
                    outputVariables: []
                    assertion: <+httpResponseCode> == 200
                  timeout: 30s
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: ManualIntervention
                          spec:
                            timeout: 1d
                            onTimeout:
                              action:
                                type: MarkAsSuccess
                  when:
                    stageStatus: Success
            rollbackSteps: []
          services:
            useFromStage:
              stage: k8sdeployment
            metadata:
              parallel: true
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Ignore
        when:
          pipelineStatus: Success
  allowStageExecutions: true
