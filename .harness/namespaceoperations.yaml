pipeline:
  name: namespace operations
  identifier: namespaceoperations
  projectIdentifier: demonstration
  orgIdentifier: tif
  tags: {}
  stages:
    - stage:
        name: create or update or delete namespace
        identifier: create_or_update_namespace
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: <+input>
            deployToAll: false
            environmentInputs: <+input>
            serviceOverrideInputs: <+input>
            infrastructureDefinitions: <+input>
          execution:
            steps:
              - step:
                  type: K8sDryRun
                  name: k8sdryrun
                  identifier: k8sdryrun
                  spec: {}
                  timeout: 1m
              - step:
                  type: ShellScript
                  name: displaymanifest
                  identifier: displaymanifest
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          cat << EOM > manifest.yaml
                          <+pipeline.stages.create_or_update_namespace.spec.execution.steps.k8sdryrun.k8s.manifestDryRun>
                          EOM
                          cat manifest.yaml
                    environmentVariables: []
                    outputVariables: []
                  timeout: 1m
              - step:
                  type: ShellScript
                  name: check-for-resource
                  identifier: checkforresource
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          namespace=<+pipeline.variables.serviceteam>-<+pipeline.variables.env>-<+pipeline.variables.namespace>
                          echo "namespace is:" $namespace
                          kubectl get ns $namespace  && found=1 || found=0

                          echo $found
                    environmentVariables: []
                    outputVariables:
                      - name: k8sresourcefound
                        type: String
                        value: found
                  timeout: 1m
                  when:
                    stageStatus: Success
              - parallel:
                  - step:
                      type: K8sApply
                      name: update-namespace
                      identifier: updatenamespace
                      spec:
                        filePaths:
                          - namespaces/artifacts/namespace-update.yaml
                        skipDryRun: false
                        skipSteadyStateCheck: false
                        skipRendering: false
                        overrides: []
                      timeout: 30s
                      when:
                        stageStatus: Success
                        condition: (<+pipeline.variables.operation> == "update") && (<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> == 1)
                  - step:
                      type: K8sApply
                      name: enable-istio-injection
                      identifier: enableistioinjection
                      spec:
                        filePaths:
                          - namespaces/artifacts/namespace-enableistioinjection.yaml
                        skipDryRun: false
                        skipSteadyStateCheck: false
                        skipRendering: false
                        overrides: []
                      timeout: 30s
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.operation> == "enableistioinjection" && (<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> == 1)
                  - step:
                      type: K8sApply
                      name: disable-istio-injection
                      identifier: disableistioinjection
                      spec:
                        filePaths:
                          - namespaces/artifacts/namespace-disableistioinjection.yaml
                        skipDryRun: false
                        skipSteadyStateCheck: false
                        skipRendering: false
                        overrides: []
                      timeout: 30s
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.operation> == "disableistioinjection" && (<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> == 1)
                  - stepGroup:
                      name: delete-namespace
                      identifier: delete_namespace
                      steps:
                        - step:
                            name: delete-namespace-teams-notification
                            identifier: deletenamespaceteamsnotification
                            template:
                              templateRef: org.teamsnotificationcloudteam
                              versionLabel: v1
                        - step:
                            type: HarnessApproval
                            name: delete namespace
                            identifier: delete_namespace1
                            spec:
                              approvalMessage: "Pls approve deletion of namespace:  <+pipeline.variables.serviceteam>-<+pipeline.variables.env>-<+pipeline.variables.namespace> This is the yaml which will be applied upon approval (delete operation):<+pipeline.stages.create_or_update_namespace.spec.execution.steps.k8sdryrun.k8s.manifestDryRun>"
                              includePipelineExecutionHistory: true
                              isAutoRejectEnabled: false
                              approvers:
                                userGroups:
                                  - org._organization_all_users
                                minimumCount: 1
                                disallowPipelineExecutor: false
                              approverInputs: []
                            timeout: 1d
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - ApprovalRejection
                                  action:
                                    type: Abort
                        - step:
                            type: K8sDelete
                            name: delete namespace
                            identifier: delete_namespace
                            spec:
                              deleteResources:
                                type: ManifestPath
                                spec:
                                  manifestPaths:
                                    - namespaces/artifacts/namespace-delete.yaml
                            timeout: 30s
                      when:
                        stageStatus: Success
                        condition: (<+pipeline.variables.operation> == "delete") && (<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> == 1)
                  - stepGroup:
                      name: create-namespace
                      identifier: createnamespace
                      steps:
                        - step:
                            name: create-namespace-teams-notification
                            identifier: createnamespaceteamsnotification
                            template:
                              templateRef: org.teamsnotificationcloudteam
                              versionLabel: v1
                        - step:
                            type: HarnessApproval
                            name: create namespace
                            identifier: create_namespace
                            spec:
                              approvalMessage: "Pls approve creation of namespace: <+pipeline.variables.serviceteam>-<+pipeline.variables.env>-<+pipeline.variables.namespace> This is the yaml which will be applied upon approval (create):<+pipeline.stages.create_or_update_namespace.spec.execution.steps.k8sdryrun.k8s.manifestDryRun>"
                              includePipelineExecutionHistory: true
                              isAutoRejectEnabled: false
                              approvers:
                                userGroups:
                                  - org._organization_all_users
                                minimumCount: 1
                                disallowPipelineExecutor: false
                              approverInputs: []
                            timeout: 1d
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - ApprovalRejection
                                  action:
                                    type: Abort
                        - step:
                            type: K8sApply
                            name: create-namespace
                            identifier: createorupdatenamespace
                            spec:
                              filePaths:
                                - namespaces/artifacts/namespace-create.yaml
                              skipDryRun: false
                              skipSteadyStateCheck: false
                              skipRendering: false
                              overrides: []
                            timeout: 30s
                            failureStrategies:
                              - onFailure:
                                  errors:
                                    - AllErrors
                                  action:
                                    type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.operation> == "create" && (<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> != 1)
              - step:
                  type: ShellScript
                  name: resource-do-not-exist
                  identifier: resourcedonotexist
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          cat << EOM > /tmp/output
                          Namespace:  <+pipeline.variables.serviceteam>-<+pipeline.variables.env>-<+pipeline.variables.namespace>  not found on the cluster 
                          Hence not executing the operation on namespace
                          Pls check for the existence of namespace and rerun the pipeline
                          EOM
                          cat /tmp/output
                    environmentVariables: []
                    outputVariables: []
                  timeout: 30s
                  when:
                    stageStatus: Success
                    condition: "(<+execution.steps.checkforresource.output.outputVariables.k8sresourcefound> == 0) &&  (((<+pipeline.variables.operation> == \"update\") || (<+pipeline.variables.operation> == \"delete\") || (<+pipeline.variables.operation> == \"enableistioinjection\") || (<+pipeline.variables.operation> == \"disableistioinjection\"))) "
            rollbackSteps: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: Ignore
  variables:
    - name: namespace
      type: String
      description: Enter the name of the namespace (mandatory)
      required: true
      value: <+input>
    - name: businessunit
      type: String
      description: Enter name of Business Unit (optional). If you don't enter one, a default value of nobu will be entered
      required: true
      value: <+input>
    - name: operation
      type: String
      description: Select the required operation on the namespace
      required: true
      value: <+input>.allowedValues(create,update,delete,enableistioinjection,disableistioinjection)
    - name: env
      type: String
      description: |+
        Select the required env of the kubernetes cluster

      required: true
      value: <+input>.allowedValues(dev,test,prod,dr)
    - name: serviceteam
      type: String
      description: Select the required service team for the namespace
      required: true
      value: <+input>.allowedValues(tif,eco,mdm,b2c,supply)
    - name: pipelineapprovaltitle
      type: String
      description: ""
      required: true
      value: You have a pipeline waiting on approval phase
    - name: pipelineapprovalsubtitle
      type: String
      description: ""
      required: true
      value: Pls approve/reject the pipeline stage
